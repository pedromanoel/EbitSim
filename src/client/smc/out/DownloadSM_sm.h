#ifndef _H_DOWNLOADSM_SM
#define _H_DOWNLOADSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : DownloadSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class DownloadMap;
class DownloadMap_NotInterestedChoked;
class DownloadMap_InterestedChoked;
class DownloadMap_NotInterestedUnchoked;
class DownloadMap_InterestedUnchoked;
class DownloadMap_Closed;
class DownloadMap_Default;
class DownloadSMState;
class DownloadSMContext;
class PeerWireThread;
class PieceMsg;
class HaveMsg;

class DownloadSMState :
    public statemap::State
{
public:

    DownloadSMState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(DownloadSMContext&) {};
    virtual void Exit(DownloadSMContext&) {};

    virtual void DROP(DownloadSMContext& context);
    virtual void bitFieldMsg(DownloadSMContext& context, BitFieldMsg const& msg);
    virtual void chokeMsg(DownloadSMContext& context);
    virtual void downloadRateTimer(DownloadSMContext& context);
    virtual void haveMsg(DownloadSMContext& context, HaveMsg const& msg);
    virtual void peerInteresting(DownloadSMContext& context);
    virtual void peerNotInteresting(DownloadSMContext& context);
    virtual void pieceMsg(DownloadSMContext& context, PieceMsg const& msg);
    virtual void snubbedTimer(DownloadSMContext& context);
    virtual void unchokeMsg(DownloadSMContext& context);

protected:

    virtual void Default(DownloadSMContext& context);
};

class DownloadMap
{
public:

    static DownloadMap_NotInterestedChoked NotInterestedChoked;
    static DownloadMap_InterestedChoked InterestedChoked;
    static DownloadMap_NotInterestedUnchoked NotInterestedUnchoked;
    static DownloadMap_InterestedUnchoked InterestedUnchoked;
    static DownloadMap_Closed Closed;
};

class DownloadMap_Default :
    public DownloadSMState
{
public:

    DownloadMap_Default(const char *name, int stateId)
    : DownloadSMState(name, stateId)
    {};

    virtual void DROP(DownloadSMContext& context);
    virtual void haveMsg(DownloadSMContext& context, HaveMsg const& msg);
    virtual void downloadRateTimer(DownloadSMContext& context);
    virtual void snubbedTimer(DownloadSMContext& context);
};

class DownloadMap_NotInterestedChoked :
    public DownloadMap_Default
{
public:
    DownloadMap_NotInterestedChoked(const char *name, int stateId)
    : DownloadMap_Default(name, stateId)
    {};

    void Entry(DownloadSMContext&);
    void bitFieldMsg(DownloadSMContext& context, BitFieldMsg const& msg);
    void chokeMsg(DownloadSMContext& context);
    void peerInteresting(DownloadSMContext& context);
    void unchokeMsg(DownloadSMContext& context);
};

class DownloadMap_InterestedChoked :
    public DownloadMap_Default
{
public:
    DownloadMap_InterestedChoked(const char *name, int stateId)
    : DownloadMap_Default(name, stateId)
    {};

    void Entry(DownloadSMContext&);
    void chokeMsg(DownloadSMContext& context);
    void peerNotInteresting(DownloadSMContext& context);
    void unchokeMsg(DownloadSMContext& context);
};

class DownloadMap_NotInterestedUnchoked :
    public DownloadMap_Default
{
public:
    DownloadMap_NotInterestedUnchoked(const char *name, int stateId)
    : DownloadMap_Default(name, stateId)
    {};

    void Entry(DownloadSMContext&);
    void chokeMsg(DownloadSMContext& context);
    void peerInteresting(DownloadSMContext& context);
    void pieceMsg(DownloadSMContext& context, PieceMsg const& msg);
    void unchokeMsg(DownloadSMContext& context);
};

class DownloadMap_InterestedUnchoked :
    public DownloadMap_Default
{
public:
    DownloadMap_InterestedUnchoked(const char *name, int stateId)
    : DownloadMap_Default(name, stateId)
    {};

    void Entry(DownloadSMContext&);
    void Exit(DownloadSMContext&);
    void chokeMsg(DownloadSMContext& context);
    void peerNotInteresting(DownloadSMContext& context);
    void pieceMsg(DownloadSMContext& context, PieceMsg const& msg);
    void unchokeMsg(DownloadSMContext& context);
};

class DownloadMap_Closed :
    public DownloadMap_Default
{
public:
    DownloadMap_Closed(const char *name, int stateId)
    : DownloadMap_Default(name, stateId)
    {};

    void Entry(DownloadSMContext&);
    void Default(DownloadSMContext& context);
};

class DownloadSMContext :
    public statemap::FSMContext
{
public:

    DownloadSMContext(PeerWireThread& owner)
    : FSMContext(DownloadMap::NotInterestedChoked),
      _owner(owner)
    {};

    DownloadSMContext(PeerWireThread& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    PeerWireThread& getOwner() const
    {
        return (_owner);
    };

    DownloadSMState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<DownloadSMState&>(*_state));
    };

    void DROP()
    {
        setTransition("DROP");
        (getState()).DROP(*this);
        setTransition(NULL);
    };

    void bitFieldMsg(BitFieldMsg const& msg)
    {
        setTransition("bitFieldMsg");
        (getState()).bitFieldMsg(*this, msg);
        setTransition(NULL);
    };

    void chokeMsg()
    {
        setTransition("chokeMsg");
        (getState()).chokeMsg(*this);
        setTransition(NULL);
    };

    void downloadRateTimer()
    {
        setTransition("downloadRateTimer");
        (getState()).downloadRateTimer(*this);
        setTransition(NULL);
    };

    void haveMsg(HaveMsg const& msg)
    {
        setTransition("haveMsg");
        (getState()).haveMsg(*this, msg);
        setTransition(NULL);
    };

    void peerInteresting()
    {
        setTransition("peerInteresting");
        (getState()).peerInteresting(*this);
        setTransition(NULL);
    };

    void peerNotInteresting()
    {
        setTransition("peerNotInteresting");
        (getState()).peerNotInteresting(*this);
        setTransition(NULL);
    };

    void pieceMsg(PieceMsg const& msg)
    {
        setTransition("pieceMsg");
        (getState()).pieceMsg(*this, msg);
        setTransition(NULL);
    };

    void snubbedTimer()
    {
        setTransition("snubbedTimer");
        (getState()).snubbedTimer(*this);
        setTransition(NULL);
    };

    void unchokeMsg()
    {
        setTransition("unchokeMsg");
        (getState()).unchokeMsg(*this);
        setTransition(NULL);
    };

private:

    PeerWireThread& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_DOWNLOADSM_SM
