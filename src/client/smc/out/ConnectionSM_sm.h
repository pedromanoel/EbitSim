#ifndef _H_CONNECTIONSM_SM
#define _H_CONNECTIONSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ConnectionSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class ConnectionMap;
class ConnectionMap_Unconnected;
class ConnectionMap_HandshakeSent;
class ConnectionMap_WaitHandshake;
class ConnectionMap_Connected;
class ConnectionMap_Closed;
class ConnectionMap_Default;
class ConnectionSMState;
class ConnectionSMContext;
class PeerWireThread;
class BitFieldMsg;
class cPacket;
class Handshake;
class PeerWireMsg;

class ConnectionSMState :
    public statemap::State
{
public:

    ConnectionSMState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(ConnectionSMContext&) {};
    virtual void Exit(ConnectionSMContext&) {};

    virtual void DROP(ConnectionSMContext& context);
    virtual void handshakeMsg(ConnectionSMContext& context, Handshake const& hs);
    virtual void incomingPeerWireMsg(ConnectionSMContext& context);
    virtual void keepAliveTimer(ConnectionSMContext& context);
    virtual void outgoingPeerWireMsg(ConnectionSMContext& context, cPacket * msg);
    virtual void tcpActiveConnection(ConnectionSMContext& context);
    virtual void tcpPassiveConnection(ConnectionSMContext& context);
    virtual void timeout(ConnectionSMContext& context);

protected:

    virtual void Default(ConnectionSMContext& context);
};

class ConnectionMap
{
public:

    static ConnectionMap_Unconnected Unconnected;
    static ConnectionMap_HandshakeSent HandshakeSent;
    static ConnectionMap_WaitHandshake WaitHandshake;
    static ConnectionMap_Connected Connected;
    static ConnectionMap_Closed Closed;
};

class ConnectionMap_Default :
    public ConnectionSMState
{
public:

    ConnectionMap_Default(const char *name, int stateId)
    : ConnectionSMState(name, stateId)
    {};

    virtual void DROP(ConnectionSMContext& context);
    virtual void keepAliveTimer(ConnectionSMContext& context);
};

class ConnectionMap_Unconnected :
    public ConnectionMap_Default
{
public:
    ConnectionMap_Unconnected(const char *name, int stateId)
    : ConnectionMap_Default(name, stateId)
    {};

    void Exit(ConnectionSMContext&);
    void tcpActiveConnection(ConnectionSMContext& context);
    void tcpPassiveConnection(ConnectionSMContext& context);
};

class ConnectionMap_HandshakeSent :
    public ConnectionMap_Default
{
public:
    ConnectionMap_HandshakeSent(const char *name, int stateId)
    : ConnectionMap_Default(name, stateId)
    {};

    void handshakeMsg(ConnectionSMContext& context, Handshake const& hs);
};

class ConnectionMap_WaitHandshake :
    public ConnectionMap_Default
{
public:
    ConnectionMap_WaitHandshake(const char *name, int stateId)
    : ConnectionMap_Default(name, stateId)
    {};

    void handshakeMsg(ConnectionSMContext& context, Handshake const& hs);
};

class ConnectionMap_Connected :
    public ConnectionMap_Default
{
public:
    ConnectionMap_Connected(const char *name, int stateId)
    : ConnectionMap_Default(name, stateId)
    {};

    void Entry(ConnectionSMContext&);
    void incomingPeerWireMsg(ConnectionSMContext& context);
    void outgoingPeerWireMsg(ConnectionSMContext& context, cPacket * msg);
    void timeout(ConnectionSMContext& context);
};

class ConnectionMap_Closed :
    public ConnectionMap_Default
{
public:
    ConnectionMap_Closed(const char *name, int stateId)
    : ConnectionMap_Default(name, stateId)
    {};

    void Entry(ConnectionSMContext&);
    void Default(ConnectionSMContext& context);
};

class ConnectionSMContext :
    public statemap::FSMContext
{
public:

    ConnectionSMContext(PeerWireThread& owner)
    : FSMContext(ConnectionMap::Unconnected),
      _owner(owner)
    {};

    ConnectionSMContext(PeerWireThread& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    PeerWireThread& getOwner() const
    {
        return (_owner);
    };

    ConnectionSMState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<ConnectionSMState&>(*_state));
    };

    void DROP()
    {
        setTransition("DROP");
        (getState()).DROP(*this);
        setTransition(NULL);
    };

    void handshakeMsg(Handshake const& hs)
    {
        setTransition("handshakeMsg");
        (getState()).handshakeMsg(*this, hs);
        setTransition(NULL);
    };

    void incomingPeerWireMsg()
    {
        setTransition("incomingPeerWireMsg");
        (getState()).incomingPeerWireMsg(*this);
        setTransition(NULL);
    };

    void keepAliveTimer()
    {
        setTransition("keepAliveTimer");
        (getState()).keepAliveTimer(*this);
        setTransition(NULL);
    };

    void outgoingPeerWireMsg(cPacket * msg)
    {
        setTransition("outgoingPeerWireMsg");
        (getState()).outgoingPeerWireMsg(*this, msg);
        setTransition(NULL);
    };

    void tcpActiveConnection()
    {
        setTransition("tcpActiveConnection");
        (getState()).tcpActiveConnection(*this);
        setTransition(NULL);
    };

    void tcpPassiveConnection()
    {
        setTransition("tcpPassiveConnection");
        (getState()).tcpPassiveConnection(*this);
        setTransition(NULL);
    };

    void timeout()
    {
        setTransition("timeout");
        (getState()).timeout(*this);
        setTransition(NULL);
    };

private:

    PeerWireThread& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_CONNECTIONSM_SM
