%{
// EbitSim - Enhanced BitTorrent Simulation
// This program is under the terms of the Creative Commons
// Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
//
// You are free:
//
//    to Share - to copy, distribute and transmit the work
//    to Remix - to adapt the work
//
// Under the following conditions:
//
//    Attribution - You must attribute the work in the manner specified by the
//    author or licensor (but not in any way that suggests that they endorse you
//    or your use of the work).
//
//    Noncommercial - You may not use this work for commercial purposes.
//
//    Share Alike - If you alter, transform, or build upon this work, you may
//    distribute the resulting work only under the same or similar license to
//    this one.
//
// With the understanding that:
//
//    Waiver - Any of the above conditions can be waived if you get permission
//    from the copyright holder.
//
//    Public Domain - Where the work or any of its elements is in the public
//    domain under applicable law, that status is in no way affected by the
//    license.
//
//    Other Rights - In no way are any of the following rights affected by the
//    license:
//        - Your fair dealing or fair use rights, or other applicable copyright
//          exceptions and limitations;
//        - The author's moral rights;
//        - Rights other persons may have either in the work itself or in how
//          the work is used, such as publicity or privacy rights.
//
//    Notice - For any reuse or distribution, you must make clear to others the
//    license terms of this work. The best way to do this is with a link to this
//    web page. <http://creativecommons.org/licenses/by-nc-sa/3.0/>
//
// Author:
//     Pedro Manoel Fabiano Alves Evangelista <pevangelista@larc.usp.br>
//     Supervised by Prof Tereza Cristina M. B. Carvalho <carvalho@larc.usp.br>
//     Graduate Student at Escola Politecnica of University of Sao Paulo, Brazil
//
// Contributors:
//     Marcelo Carneiro do Amaral <mamaral@larc.usp.br>
//     Victor Souza <victor.souza@ericsson.com>
//
// Disclaimer:
//     This work is part of a Master Thesis developed by:
//        Pedro Evangelista, graduate student at
//        Laboratory of Computer Networks and Architecture
//        Escola Politecnica
//        University of Sao Paulo
//        Brazil
//     and supported by:
//        Innovation Center
//        Ericsson Telecomunicacoes S.A., Brazil.
//
// UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING AND TO THE
// FULLEST EXTENT PERMITTED BY APPLICABLE LAW, LICENSOR OFFERS THE WORK AS-IS
// AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
// EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION,
// WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE
// PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME
// JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THIS
// EXCLUSION MAY NOT APPLY TO YOU.
%}

%declare class BitFieldMsg
%declare class cPacket
%declare class Handshake
%declare class PeerWireMsg
%class PeerWireThread
%header PeerWireThread.h
%start ConnectionMap::Unconnected

// == Syntax ==
//CurrentState
//Entry{
//    entryActions(); // executed when entrying this state
//}
//Exit{
//    exitActions(); // executed when exiting this state
//}
//{
//    transition // perform the actions() then transit to the NextState
//        NextState
//            {
//                actions();
//            }
//}
// == Application transitions ==
// DROP
// keepAliveTimer
// tcpActiveConnection
// tcpPassiveConnection
// timeout
// == Protocol transitions ==
// bitFieldMsg
// handshakeMsg
// incomingPeerWireMsg
// outgoingPeerWireMsg

%map ConnectionMap
%%
Unconnected
Exit
{
    // start the keepAlive and timeout timers
    startHandshakeTimers();
}
{
    // actively starting a connection with the Peer
    tcpActiveConnection
        HandshakeSent
            {
                sendPeerWireMsg(ctxt.getHandshake());
            }
    // the Peer started the connection with the Client
    tcpPassiveConnection
        WaitHandshake
            {}
}

HandshakeSent
{
    // The handshake is invalid
    handshakeMsg(hs: Handshake const&)[!ctxt.checkHandshake(hs)]
        ClosingConnection
            {}
    // this transition is called if the handshake is valid and if the client BitField is empty
    handshakeMsg(hs: Handshake const&)[ctxt.isBitFieldEmpty()]
        Connected
            {}
    // this transition is called if the handshake is valid and if the client BitField is NOT empty
    handshakeMsg(hs: Handshake const&)
        Connected
            {
                sendPeerWireMsg(ctxt.getBitFieldMsg());
            }
}

WaitHandshake
{
    // The handshake is invalid
    handshakeMsg(hs: Handshake const&)[!ctxt.checkHandshake(hs)]
        ClosingConnection
            {}
    // this transition is called if the handshake is valid and if the client BitField is empty
    handshakeMsg(hs: Handshake const&)[ctxt.isBitFieldEmpty()]
        Connected
            {
                sendPeerWireMsg(ctxt.getHandshake());
            }
    // this transition is called if the handshake is valid and if the client BitField is NOT empty
    handshakeMsg(hs: Handshake const&)
        Connected
            {
                sendPeerWireMsg(ctxt.getHandshake());
                sendPeerWireMsg(ctxt.getBitFieldMsg());
            }
}
Connected
Entry {
	printDebugMsgConnection("Entering state Connected");
    startMachines();
    connected();
    startHandshakeTimers();
}
Exit {
    stopMachines();
}
{
    // every time a PeerWireMsg arrives, renew the timeout timer.
    // only close the connection when no message arrives for some time
    incomingPeerWireMsg()
        nil
            {
                renewTimeoutTimer();
            }
    // every time a PeerWireMsg is sent, renew the keep-alive timer
    // only send keepAliveMsg when no PeerWireMsg is sent for some time
    outgoingPeerWireMsg(msg: cPacket *)
        nil
            {
                sendPeerWireMsg(msg);
                renewKeepAliveTimer();
            }
    // when this timer expires, send a keep-alive message
    keepAliveTimer
        nil
            {
                sendPeerWireMsg(ctxt.getKeepAliveMsg());
                renewKeepAliveTimer(); // sent a PeerWireMsg
            }
    timeout
        ClosingConnection
            {}
    applicationClose
        ClosingConnection
            {}
}

ClosingConnection
Entry {
	printDebugMsgConnection("Entering state ClosingConnection");
    stopHandshakeTimers();
    closeLocalConnection();
}
{
    // For when the ContentManager closes, and the SwarmManager closes again
    applicationClose
        nil
            {}
    localClose
        LocalClosed
            {}
    remoteClose
        RemoteClosed
            {}
}

LocalClosed
Entry {
	printDebugMsgConnection("Entering state LocalClosed");
}
{
    // For when the ContentManager closes, and the SwarmManager closes again
    applicationClose
        nil
            {}
	remoteClose
        Closed
            {}
}

RemoteClosed
Entry {
	printDebugMsgConnection("Entering state RemoteClosed");
}
{
    // For when the ContentManager closes, and the SwarmManager closes again
    applicationClose
        nil
            {}
    localClose
        Closed
            {}
}

Closed
Entry {
	printDebugMsgConnection("Entering state Closed");
    removeFromSwarm();
}
{
}

// Fallback transitions, called when a transition occurs in a state that don't
// know how to handle it.
Default
{
    incomingPeerWireMsg // the message might be in the queue already
        nil
            {}
    keepAliveTimer // the message might be in the queue already
        nil
            {}
    remoteClose
        RemoteClosed
            {
    			stopHandshakeTimers();
    			closeLocalConnection();
            }
}
%%
