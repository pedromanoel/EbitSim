%{
// EbitSim - Enhanced BitTorrent Simulation
// This program is under the terms of the Creative Commons
// Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
//
// You are free:
//
//    to Share - to copy, distribute and transmit the work
//    to Remix - to adapt the work
//
// Under the following conditions:
//
//    Attribution - You must attribute the work in the manner specified by the
//    author or licensor (but not in any way that suggests that they endorse you
//    or your use of the work).
//
//    Noncommercial - You may not use this work for commercial purposes.
//
//    Share Alike - If you alter, transform, or build upon this work, you may
//    distribute the resulting work only under the same or similar license to
//    this one.
//
// With the understanding that:
//
//    Waiver - Any of the above conditions can be waived if you get permission
//    from the copyright holder.
//
//    Public Domain - Where the work or any of its elements is in the public
//    domain under applicable law, that status is in no way affected by the
//    license.
//
//    Other Rights - In no way are any of the following rights affected by the
//    license:
//        - Your fair dealing or fair use rights, or other applicable copyright
//          exceptions and limitations;
//        - The author's moral rights;
//        - Rights other persons may have either in the work itself or in how
//          the work is used, such as publicity or privacy rights.
//
//    Notice - For any reuse or distribution, you must make clear to others the
//    license terms of this work. The best way to do this is with a link to this
//    web page. <http://creativecommons.org/licenses/by-nc-sa/3.0/>
//
// Author:
//     Pedro Manoel Fabiano Alves Evangelista <pevangelista@larc.usp.br>
//     Supervised by Prof Tereza Cristina M. B. Carvalho <carvalho@larc.usp.br>
//     Graduate Student at Escola Politecnica of University of Sao Paulo, Brazil
//
// Contributors:
//     Marcelo Carneiro do Amaral <mamaral@larc.usp.br>
//     Victor Souza <victor.souza@ericsson.com>
//
// Disclaimer:
//     This work is part of a Master Thesis developed by:
//        Pedro Evangelista, graduate student at
//        Laboratory of Computer Networks and Architecture
//        Escola Politecnica
//        University of Sao Paulo
//        Brazil
//     and supported by:
//        Innovation Center
//        Ericsson Telecomunicacoes S.A., Brazil.
//
// UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING AND TO THE
// FULLEST EXTENT PERMITTED BY APPLICABLE LAW, LICENSOR OFFERS THE WORK AS-IS
// AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
// EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION,
// WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE
// PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME
// JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THIS
// EXCLUSION MAY NOT APPLY TO YOU.
%}

%declare class RequestMsg
%declare class CancelMsg
%include PeerWire_m.h
//%class UploadStateMachine
//%header UploadStateMachine.h
%class PeerWireThread
%header PeerWireThread.h
//%start UploadMap::Unconnected
%start UploadMap::NotInterestingChoking

//CurrentState
//Entry{
//    entryActions(); // executed when entrying this state
//}
//Exit{
//    exitActions(); // executed when exiting this state
//}
//{
//    transition // perform the actions() then transit to the NextState
//        NextState
//            {
//                actions();
//            }
//}
%map UploadMap
%%
NotInterestingChoking
Entry {
    //printDebugMsgUpload("Entering state NotInterestingChoking");
}
Exit {
    //printDebugMsgUpload("Exiting state NotInterestingChoking");
}
{
    interestedMsg
        InterestingChoking
            {
                setInterested(true);
                fillUploadSlots();
            }
    unchokePeer
        NotInterestingUnchoking
            {
                outgoingPeerWireMsg_ConnectionSM(ctxt.getUnchokeMsg());
            }
}
InterestingChoking
Entry {
    //printDebugMsgUpload("Entering state InterestingChoking");
}
Exit {
    //printDebugMsgUpload("Exiting state InterestingChoking");
}
{
    notInterestedMsg
        NotInterestingChoking
            {
                setInterested(false);
            }
    // in case a request is sent before the peer receives a chokeMsg
    requestMsg(msg: RequestMsg const&)
        nil
            {
                outgoingPeerWireMsg_ConnectionSM(ctxt.getChokeMsg());
            }
    unchokePeer
        InterestingUnchoking
            {
                outgoingPeerWireMsg_ConnectionSM(ctxt.getUnchokeMsg());
            }
}
NotInterestingUnchoking
Entry {
    //printDebugMsgUpload("Entering state NotInterestingUnchoking");
}
Exit {
    //printDebugMsgUpload("Exiting state NotInterestingUnchoking");
}
{
    interestedMsg
        InterestingUnchoking
            {
                setInterested(true);
                callChokeAlgorithm();
            }
    chokePeer
        NotInterestingChoking
            {
                outgoingPeerWireMsg_ConnectionSM(ctxt.getChokeMsg());
            }
}
InterestingUnchoking
Entry {
    //printDebugMsgUpload("Entering state InterestingUnchoking");
    startUploadTimers();
}
Exit {
    //printDebugMsgUpload("Exiting state InterestingUnchoking");
    stopUploadTimers();
}
{
    cancelMsg(msg: CancelMsg const&)
        nil
            {
                cancelPiece(msg);
            }
    notInterestedMsg
        NotInterestingUnchoking
            {
                setInterested(false);
                // An unchoked peer that looses interest will be choked
                callChokeAlgorithm();
            }
    requestMsg(msg: RequestMsg const&)
        nil
            {
                outgoingPeerWireMsg_ConnectionSM(ctxt.getPieceMsg(msg));
            }

    chokePeer
        InterestingChoking
            {
                outgoingPeerWireMsg_ConnectionSM(ctxt.getChokeMsg());
            }
    DROP
        Closed
            {
                callChokeAlgorithm();
            }
}

Closed
Entry {
    stopUploadTimers();
    printDebugMsgUpload("Thread terminated");
}
{
    Default
        nil
            {
                printDebugMsgUpload("Thread terminated");
            }
}

Default
Entry
{
    //printDebugMsgUpload("Entering state Default");
}
Exit
{
    //printDebugMsgUpload("Exiting state Default");
}
{
    DROP
        Closed
            {}
    //disconnect
    //    Unconnected
    //        {
    //        }
    uploadRateTimer()
        nil
            {
                renewUploadRateTimer();
                calculateUploadRate();
            }
}
%%
