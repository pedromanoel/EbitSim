[Config MultipleBTApps]
network = MultipleBitTorrentApps
description = "Four BitTorrentApps in each Peer downloading different swarms"
sim-time-limit = 1200s

#**.mac[*].txQueueLimit = 100000
#**.mac.txrate = 1Gbps
#**.mac.txrate = 100Mbps
# TCP
**.tcp.mss = 536 # bigger size?
#**.tcp.tcpAlgorithmClass = "TCPReno"#"TCPTahoe"#"TCPNewReno"#"TCPNoCongestionControl"#"DumbTCP"
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.recordStats = false
#**.tcp.nagleEnabled = false

# SwarmManager
**.swarmManager.refreshInterval = 100s
#**.swarmManager.connectAddress =
#**.swarmManager.connectPort =
**.swarmManager.numWant = 20

**.trackerApp.maxListSize = 50

**.swarmManager.subModulesDebugFlag = true
#**.simulationController.debugFlag = true
#**.bitTorrentClient.debugFlag = true
#**.clientController.debugFlag = true
**.swarmManager.debugFlag = true
**.trackerApp.debugFlag = true

# Thruput measuring modules. Thruput calculated whenever 50 packets are transfered
# or every 100ms
**.peer[*].eth.thruputMeterDL.batchSize = 50
**.peer[*].eth.thruputMeterUL.batchSize = 50
**.peer[*].eth.thruputMeterUL.maxInterval = 100ms
**.peer[*].eth.thruputMeterDL.maxInterval = 100ms

# the content to be downloaded by the Peers
**.trackerApp.contents = xmldoc("../simulations/BTContents.xml", "contentList")
#**.clientController.videoContent = "content1 content2 content3"

# exponential arrival
**.clientController.startTime =  uniform(1s, 10s)

**.mac.txrate = 1000Mbps
*.numPeers = ${p=100..1000 step 100}
#repeat = 10
seed-set = ${repetition}

*.peer[*].bitTorrentApp*.clientControllerModule = "ClientControllerSeq"
*.peer[*].bitTorrentApp1.clientController.startAfter = ""
*.peer[*].bitTorrentApp2.clientController.startAfter = "bitTorrentApp1"
*.peer[*].bitTorrentApp3.clientController.startAfter = "bitTorrentApp2"
*.peer[*].bitTorrentApp4.clientController.startAfter = "bitTorrentApp3" 
*.peer[*].bitTorrentApp1.bitTorrentClient.port = 6881
*.peer[*].bitTorrentApp2.bitTorrentClient.port = 6882
*.peer[*].bitTorrentApp3.bitTorrentClient.port = 6883
*.peer[*].bitTorrentApp4.bitTorrentClient.port = 6884
*.peer[*].bitTorrentApp1.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_1']")
*.peer[*].bitTorrentApp2.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_2']")
*.peer[*].bitTorrentApp3.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_3']")
*.peer[*].bitTorrentApp4.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_4']")
# 80% of the peers are seeding
*.peer[*].bitTorrentApp*.clientController.seeder = ancestorIndex(2)/${p} < ${seederPerc=0.1, 0.5, 0.9}

# get the index of the second ancestor (peer[*]), 20% of the Peers are Seeders
*.peer[*].bitTorrentApp*.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"

**.bitTorrentApp*.**.vector-recording = true
**.routerThruput.eth[*].queue.*.scalar-recording = true
**.routerThruput.eth[*].queue.*.vector-recording = true
MultipleBitTorrentApps.*.vector-recording = true
MultipleBitTorrentApps.*.scalar-recording = true
**.scalar-recording = false
**.vector-recording = false

[Config MultiplePeers]
extends = MultiplePeersBase
description = "Experiment run with different number of seeders and peers"
experiment-label = "Varying Number of Peers"
measurement-label = "${p} Peers, ${seederPerc} Seeder proportion"

#**.simulationController.debugFlag = true
#**.bitTorrentClient.debugFlag = true
#**.clientController.debugFlag = true
#**.swarmManager.debugFlag = true
**.swarmManager.subModulesDebugFlag = true
#**.trackerApp.debugFlag = true

# Thruput measuring modules. Thruput calculated whenever 50 packets are transfered
# or every 100ms
**.peer[*].eth.thruputMeterDL.batchSize = 50
**.peer[*].eth.thruputMeterUL.batchSize = 50
**.peer[*].eth.thruputMeterUL.maxInterval = 100ms
**.peer[*].eth.thruputMeterDL.maxInterval = 100ms

# the content to be downloaded by the Peers
**.trackerApp.contents = xmldoc("../simulations/BTContents.xml", "contentList")
#**.clientController.videoContent = "content1 content2 content3"

# exponential arrival
**.clientController.startTime =  uniform(1s, 10s)

**.mac.txrate = 1000Mbps
*.numPeers = ${p=5,100..1000 step 100}
#repeat = 10
seed-set = ${repetition}

#*.peer[0].**.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test1_seeder']")
#*.peer[*].**.profile = true && xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test1_seeder']")
*.peer[*].bitTorrentApp.clientControllerModule = "ClientController"
*.peer[*].bitTorrentApp.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3']")
# 80% of the peers are seeding
*.peer[*].bitTorrentApp.clientController.seeder = ancestorIndex(2)/${p} < ${seederPerc=0.1, 0.5, 0.9}

# record contentManager statistics only for those peers that are not seeding
#*.peer[0].bitTorrentApp.clientController.seeder = true
# get the index of the second ancestor (peer[*]), 20% of the Peers are Seeders
*.peer[*].bitTorrentApp.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"

# disable unwanted vectors and scalars
#**.bitTorrentApp.**.scalar-recording = true
**.bitTorrentApp.**.vector-recording = true
#**.peer[*].eth.thruputMeterDL.**.vector-recording = true
#**.peer[*].eth.thruputMeterUL.**.vector-recording = true
#**.eth[*].queue.vector-recording = true
#**.eth[*].queue.*.scalar-recording = true
#**.swarmManager.**.scalar-recording = true
**.routerThruput.eth[*].queue.*.scalar-recording = true
**.routerThruput.eth[*].queue.*.vector-recording = true
Seeders_xM_Peers_xN.*.vector-recording = true
Seeders_xM_Peers_xN.*.scalar-recording = true
**.scalar-recording = false
**.vector-recording = false

# enable tcpdump
#**.peer[0].tcpDump.dumpFile = "peer0.pcap"

[Config MultiplePeersBase]
network = Seeders_xM_Peers_xN
sim-time-limit = 1200s
description =

#**.mac[*].txQueueLimit = 100000
#**.mac.txrate = 1Gbps
#**.mac.txrate = 100Mbps
# TCP
**.tcp.mss = 536 # bigger size?
#**.tcp.tcpAlgorithmClass = "TCPReno"#"TCPTahoe"#"TCPNewReno"#"TCPNoCongestionControl"#"DumbTCP"
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.recordStats = false
#**.tcp.nagleEnabled = false

# BitTorrent Parameters, by module

# ClientController

# Dynamically created modules:
# These parameters are not read by the simulation, therefore are useless
#**.choker.roundInterval =
#**.choker.optimisticRoundRateInLeech =
#**.choker.optimisticRoundRateInSeed =
#**.choker.regularUnchoked =
#**.choker.optimisticUnchoked =
#**.contentManager.numOfPieces = 8 # (file of 2MB)
#**.contentManager.numOfSubPieces = 8 # (file of 2MB)
#**.contentManager.subPieceSize = 32KB
#**.contentManager.haveBundleSize = 10
#**.contentManager.requestBundleSize = 10
#**.contentManager.seeder =

# SwarmManager
**.swarmManager.refreshInterval = 100s
#**.swarmManager.connectAddress =
#**.swarmManager.connectPort =
**.swarmManager.numWant = 20

# BitTorrentClient
**.bitTorrentClient.processingTime = 1ms
#**.bitTorrentClient.downloadRateInterval= 1s
#**.bitTorrentClient.keepAliveInterval = 60s
#**.bitTorrentClient.oldUnchokeInterval = 20s
#**.bitTorrentClient.snubbedInterval = 30s
#**.bitTorrentClient.timeoutInterval = 120s
#**.bitTorrentClient.uploadRateInterval = 1s
#**.bitTorrentClient.globalNumberOfPeers = 30
#**.bitTorrentClient.numberOfActivePeers = 8
#**.bitTorrentClient.numberOfPassivePeers = 2

# TrackerApp
#**.trackerApp.address =
#**.trackerApp.port =
#**.trackerApp.debugFlag =
#**.trackerApp.interval =
**.trackerApp.maxListSize = 50

[Config ThruputStudy]
extends = MultiplePeersBase
description = "A study of the thruput measure parameters"
measurement-label = "Batch Size: ${bs}, Maximum Interval: ${mi}"

# Thruput measuring modules. Thruput calculated whenever 50 packets are transfered
# or every 100ms
**.thruputMeterDL.batchSize = ${bs=50,100,500,1000}
**.thruputMeterUL.batchSize = ${bs}
**.thruputMeterDL.maxInterval = ${mi=10, 100, 1000}ms
**.thruputMeterUL.maxInterval = ${mi}ms

**.mac.txrate = 1000Mbps
*.numPeers = 10

# disable unwanted vectors and scalars
**.bitTorrentApp.**.scalar-recording = true
**.bitTorrentApp.**.vector-recording = true
**.thruputMeterDL.**.vector-recording = true
**.thruputMeterUL.**.vector-recording = true
#**.router.eth[*].queue.vector-recording = true
#**.router.eth[*].queue.*.scalar-recording = true
*.*.scalar-recording = true
**.scalar-recording = false
**.vector-recording = false

# the content to be downloaded by the Peers
**.trackerApp.contents = xmldoc("../simulations/BTContents.xml", "contentList")
#**.clientController.videoContent = "content1 content2 content3"

#*.peer[0].**.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test1_seeder']")
#*.peer[*].**.profile = true && xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test1_seeder']")
*.peer[*].bitTorrentApp.clientControllerModule = "ClientController"
*.peer[*].bitTorrentApp.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test2']")
*.peer[*].bitTorrentApp.clientController.seeder = ancestorIndex(2) < 2
#*.peer[0].bitTorrentApp.clientController.seeder = true
# get the index of the second ancestor (peer[*]), 20% of the Peers are Seeders
*.peer[*].bitTorrentApp.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"

[Config BigScope]
network = BigScope
description = ""
sim-time-limit = 500s
# =====================
# Network Configuration
# =====================
# ---
# MAC
# ---
#**.mac[*].txQueueLimit = 100000
#**.mac.txrate = 1000Mbps
# --------
# ETHERNET
# --------
#**.queue.frameCapacity = 100000
# ---
# TCP
# ---
**.tcp.mss = 536 # bigger size?
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.recordStats = false

# ================================
# BitTorrent Parameters, by module
# ================================
# ----------------
# ClientController
# ----------------
#**.clientController.seedTime = 1000s
#**.clientController.infoHash = "0123456789ABCDEF0123"
# all the rest are leechers
**.clientControllerModule = "ClientController"
**.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test2']")
# seeders
**.cache.bitTorrentApp.clientController.seeder = true
**.proxy.bitTorrentApp.clientController.seeder = true
# ----------------
# BitTorrentClient
# ----------------
**.bitTorrentApp.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"
# --------------------
# ConnectedPeerManager
# --------------------
#**.connectedPeerManager.activeConnections = 2
#**.connectedPeerManager.passiveConnections = 4
# --------------
# ContentManager
# --------------
#**.contentManager.blockSize = 32KB
#**.contentManager.pieceSize = 256KB
#**.contentManager.numberOfPieces = 8 # (file of 2MB)
#**.contentManager.requestBundleSize = 10
#**.contentManager.haveBundleSize = 10
# ------------
# SwarmManager
# ------------
**.swarmManager.refreshInterval = 2s
**.swarmManager.connectAddress = "BigScope.tracker"
#**.smallScope.**.swarmManager.connectAddress = "bigScope.trackerIPTV1"
#**.smallScope.**.swarmManager.connectAddress = "smallScope.tracker1"
#**.swarmManager.numWant = ${numWant=2,4,20}
# --------------
# TrackerApp
# --------------
**.trackerApp.contents = xmldoc("../simulations/BTContents.xml", "contentList")

# ===========
# Debug Flags
# ===========
**.swarmManager.debugFlag = true
**.swarmManager.subModulesDebugFlag = true
**.bitTorrentClient.debugFlag = true
**.trackerApp.debugFlag = true
#**.contentManager.debugFlag = true
**.clientController.debugFlag = true
#**.simulationController.debugFlag = true

# =========================================
# Experiment Configuration (parameter study
# =========================================
**.mac.txrate = ${txrate=10Mbps,100Mbps}
**.swarmManager.numWant = ${numWant=2,20}
**.numPeerS1 = ${peersS1=0,1,5,10,50,100}#,100,500}
**.numPeerS2 = ${peersS2=0,20}#0,0,2}
constraint = ($peersS1 == 0 && $peersS2 > 0) ||  ($peersS1 > 0 && $peersS2 == 0)
experiment-label = "${configname}"
measurement-label = "Tx Rate: ${txrate} - S1: ${peersS1}, S2: ${peersS2}"

# =======================
# Recording of statistics
# =======================
output-vector-precision = 2
#**.swarmManager.**.scalar-recording = true
#**.swarmManager.**.vector-recording = true
#**.peer*.dataRateCollector.**.vector-recording = true
**.peerS1[*].bitTorrentApp.swarmManager.contentManager*.*.scalar-recording = true
**.peerS1[*].bitTorrentApp.swarmManager.contentManager*.*.vector-recording = true
**.peerS2[*].bitTorrentApp.swarmManager.contentManager*.*.scalar-recording = true
**.peerS2[*].bitTorrentApp.swarmManager.contentManager*.*.vector-recording = true
**.bitTorrentClient.*.scalar-recording = true
**.bitTorrentApp.**.vector-recording = true
#**.eth[*].mac.bytesSent.vector-recording = true
#**.eth.mac.bytesSent.vector-recording = true
#**.eth[*].**.vector-recording-intervals = 10..30,50..100,120..351
#**.eth.**.vector-recording-intervals = 10..30, 50..100, 120..351
#**.r1.eth[*].queue.**.vector-recording = true
#**.r2.eth[*].queue.**.vector-recording = true
#**.eth.**.vector-recording = true
output-vectors-memory-limit = 16GB

**.scalar-recording = false
**.vector-recording = false

# =====================
# Include Parent Config 
# =====================
include omnetpp.ini
