###
### Include Parent Config
###
include omnetpp.ini

###
### Basic configuration for scenarios using the ClientController
###
[Config Base]
network = BasicTopology
seed-set = ${repetition}

## Ethernet
#**.mac[*].txQueueLimit = 100000

## TCP
**.tcp.mss = 536 # bigger size?
**.tcp.tcpAlgorithmClass = "TCPReno"
#**.tcp.tcpAlgorithmClass = "TCPTahoe"
#**.tcp.tcpAlgorithmClass = "TCPNewReno"
#**.tcp.tcpAlgorithmClass = "TCPNoCongestionControl"
#**.tcp.tcpAlgorithmClass = "DumbTCP"
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.recordStats = false
#**.tcp.nagleEnabled = false

## The type of the bitTorrentApplication
*.peer[*].typename = "Peer"

## Factors
# Exponential arrival, for simple testing
*.clientController.startTime =  10s
*.clientController.trackerAddress = "tracker"
*.clientController.trackerPort = 8082

**.mac.txrate = 1000Mbps # bandwidth

## Parameters
**.swarmManager.refreshInterval = 100s
**.swarmManager.numWant = 20
**.tcpApp[0].maxListSize = 50
**.tcpApp[0].contents = xmldoc("../simulations/BTContents.xml", "contentList")

# processing time configured with the histogram with 55 bins
*.peer[*].bitTorrentApp.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"
# Thruput calculated whenever 50 packets are transfered or every 100ms
#**.peer[*].eth.thruputMeterDL.batchSize = 50
#**.peer[*].eth.thruputMeterUL.batchSize = 50
#**.peer[*].eth.thruputMeterUL.maxInterval = 100ms
#**.peer[*].eth.thruputMeterDL.maxInterval = 100ms


## Statistics
# The eth and arp modules also save statistics
#**.eth.**.vector-recording = false
#**.eth.**.scalar-recording = false
#**.eth[*].**.vector-recording = false
#**.eth[*].**.scalar-recording = false
#**.arp.**.vector-recording = false
#**.arp.**.scalar-recording = false
# enable recordings by module
*.clientController.*.vector-recording = true
*.*.scalar-recording = true
*.*.vector-recording = true
**.bitTorrentClient.*.scalar-recording = true
**.swarmManager.contentManager**.vector-recording = true

# disable all recordings that are not explicitly defined
**.scalar-recording = false
**.vector-recording = false

###
### Configure a network for studying variable seeder:leecher ratios
###
[Config SimpleTopology]
extends = Base
description = "Experiment run with different number of seeders and peers"
experiment-label = "Varying Number of Peers"
#measurement-label = "${peers} Peers, ${seederPerc} Seeder proportion"
measurement-label = "Rate ${rate}, File ${file}"
#repeat = 10

*.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='${file=small,medium,large}']")
**.uploadLimiter.bytesSec = ${rate=64KiB, 128KiB,512KiB}
constraint = ("$file" == "small" && "$rate" == "64KiB") ||\
             ("$file" == "medium" && "$rate" == "128KiB") ||\
             ("$file" == "large" && "$rate" == "512KiB")
*.numPeers = ${peers=500}
*.clientController.seederPercentage = ${seederPerc=0.3}

###
### Configure a network quick tests
###
[Config Test]
sim-time-limit=10h
extends = Base
description = "Experiment run with only a few peers to test if the simulation is working"

# 2.5MB content
*.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test_simple']")
*.clientController.seederPercentage = 0.3
*.numPeers = ${peers=5,50,500}
num-rngs = 3
**.peer[*].bitTorrentApp.swarmManager.contentManager*.rng-0 = 0
**.peer[*].bitTorrentApp.swarmManager.choker*.rng-0 = 1
**.tracker.**.rng-0 = 2
**.contentManager*.bytesSec = ${rate=10KiB, 100KiB, 1MiB}

## Debug flags for printing messages to std::clog
**.bitTorrentClient.debugFlag = true
#**.clientController.debugFlag = true
#**.swarmManager.debugFlag = true
**.swarmManager.subModulesDebugFlag = true
#**.trackerApp.debugFlag = true
