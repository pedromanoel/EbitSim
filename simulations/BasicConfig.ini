###
### Parent configuration extended by other scenarios based on Seeders_xM_Peers_xN
###
[Config Base]
network = BasicTopology
sim-time-limit = 1200s
description = "The parent network extended by the other scenarios based on BasicTopology"

## Ethernet
#**.mac[*].txQueueLimit = 100000

## TCP
**.tcp.mss = 536 # bigger size?
#**.tcp.tcpAlgorithmClass = "TCPReno"#"TCPTahoe"#"TCPNewReno"#"TCPNoCongestionControl"#"DumbTCP"
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.recordStats = false
#**.tcp.nagleEnabled = false

## Debug flags for printing messages to std::clog
#**.simulationController.debugFlag = true
#**.bitTorrentClient.debugFlag = true
#**.clientController.debugFlag = true
#**.swarmManager.debugFlag = true
#**.swarmManager.subModulesDebugFlag = true
#**.trackerApp.debugFlag = true


###
### Extends the Base and configure a network for studying variable
### seeder:leecher ratios
###
[Config SimpleTopology]
extends = Base
description = "Experiment run with different number of seeders and peers"
experiment-label = "Varying Number of Peers"
measurement-label = "${p} Peers, ${seederPerc} Seeder proportion"

*.peer[*].typename = "Peer"

## Factors
# Exponential arrival, for simple testing
*.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test1']")
*.clientController.seederPercentage = ${seederPerc=0.1, 0.5, 0.9}
*.clientController.startTime =  10s
*.clientController.trackerAddress = "tracker"
*.clientController.trackerPort = 8082

**.mac.txrate = 1000Mbps # bandwidth
*.numPeers = ${p=5,100..1000 step 100}
# seeder/peer ratio
seed-set = ${repetition}
#repeat = 10

## Parameters

## Global module configuration
**.swarmManager.refreshInterval = 100s
**.swarmManager.numWant = 20
**.trackerApp.maxListSize = 50

# The contents available in the tracker
**.trackerApp.contents = xmldoc("../simulations/BTContents.xml", "contentList")
# The contents downloaded by the clients
# processing time configured with the histogram with 55 bins
*.peer[*].bitTorrentApp.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"
# Thruput calculated whenever 50 packets are transfered or every 100ms
**.peer[*].eth.thruputMeterDL.batchSize = 50
**.peer[*].eth.thruputMeterUL.batchSize = 50
**.peer[*].eth.thruputMeterUL.maxInterval = 100ms
**.peer[*].eth.thruputMeterDL.maxInterval = 100ms

## Statistics
# enable recordings by module
BasicTopology.*.vector-recording = true
BasicTopology.*.scalar-recording = true
**.bitTorrentApp.**.scalar-recording = true
**.bitTorrentApp.**.vector-recording = true
#**.routerThruput.eth[*].queue.*.scalar-recording = true
#**.routerThruput.eth[*].queue.*.vector-recording = true

# The eth and arp modules also save statistics
#**.eth.**.vector-recording = false
#**.eth.**.scalar-recording = false
#**.eth[*].**.vector-recording = false
#**.eth[*].**.scalar-recording = false
#**.arp.**.vector-recording = false
#**.arp.**.scalar-recording = false

# disable all recordings that are not explicitly defined
**.scalar-recording = false
**.vector-recording = false

## Enable tcpdump
#**.peer[0].tcpDump.dumpFile = "peer0.pcap"


###
### Four BitTorrentApps in each Peer downloading different swarms
###
[Config MultipleBTApps]
extends = Base
description = "Four BitTorrentApps in each Peer downloading different swarms"
sim-time-limit = 1200s

*.peer[*].typename = "PeerMultiple"

# SwarmManager
**.swarmManager.refreshInterval = 100s
**.swarmManager.numWant = 20

**.trackerApp.maxListSize = 50

# Thruput measuring modules. Thruput calculated whenever 50 packets are transfered
# or every 100ms
**.peer[*].eth.thruputMeterDL.batchSize = 50
**.peer[*].eth.thruputMeterUL.batchSize = 50
**.peer[*].eth.thruputMeterUL.maxInterval = 100ms
**.peer[*].eth.thruputMeterDL.maxInterval = 100ms

# the content to be downloaded by the Peers
**.trackerApp.contents = xmldoc("../simulations/BTContents.xml", "contentList")
#**.clientController.videoContent = "content1 content2 content3"

# exponential arrival
**.clientController.startTime =  uniform(1s, 10s)

**.mac.txrate = 1000Mbps
*.numPeers = ${p=100..1000 step 100}
#repeat = 10
seed-set = ${repetition}

*.peer[*].bitTorrentApp*.clientControllerModule = "ClientControllerSeq"
*.peer[*].bitTorrentApp1.clientController.startAfter = ""
*.peer[*].bitTorrentApp2.clientController.startAfter = "bitTorrentApp1"
*.peer[*].bitTorrentApp3.clientController.startAfter = "bitTorrentApp2"
*.peer[*].bitTorrentApp4.clientController.startAfter = "bitTorrentApp3" 
*.peer[*].bitTorrentApp1.bitTorrentClient.port = 6881
*.peer[*].bitTorrentApp2.bitTorrentClient.port = 6882
*.peer[*].bitTorrentApp3.bitTorrentClient.port = 6883
*.peer[*].bitTorrentApp4.bitTorrentClient.port = 6884
*.peer[*].bitTorrentApp1.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_1']")
*.peer[*].bitTorrentApp2.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_2']")
*.peer[*].bitTorrentApp3.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_3']")
*.peer[*].bitTorrentApp4.clientController.profile = xmldoc("../simulations/BTProfiles.xml","profileList/profile[@name='test3_4']")
# 80% of the peers are seeding
*.peer[*].bitTorrentApp*.clientController.seeder = ancestorIndex(2)/${p} < ${seederPerc=0.1, 0.5, 0.9}

# get the index of the second ancestor (peer[*]), 20% of the Peers are Seeders
*.peer[*].bitTorrentApp*.bitTorrentClient.processingTimeHistogram = "../simulations/hist_55bin.dat"

**.bitTorrentApp*.**.vector-recording = true
**.routerThruput.eth[*].queue.*.scalar-recording = true
**.routerThruput.eth[*].queue.*.vector-recording = true
MultipleBitTorrentApps.*.vector-recording = true
MultipleBitTorrentApps.*.scalar-recording = true
**.scalar-recording = false
**.vector-recording = false


###
### Include Parent Config
###
include omnetpp.ini
