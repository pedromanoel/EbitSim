###
### Include Parent Config
###
include omnetpp.ini

###
### Basic configuration for scenarios using the ClientController
###
[Config Base]
network = BasicTopology
seed-set = ${repetition}

## Ethernet
#**.mac[*].txQueueLimit = 100000

## TCP
**.tcp.mss = 536 # bigger size?
**.tcp.tcpAlgorithmClass = "TCPReno"
#**.tcp.tcpAlgorithmClass = "TCPTahoe"
#**.tcp.tcpAlgorithmClass = "TCPNewReno"
#**.tcp.tcpAlgorithmClass = "TCPNoCongestionControl"
#**.tcp.tcpAlgorithmClass = "DumbTCP"
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.recordStats = false
#**.tcp.nagleEnabled = false

## The type of the bitTorrentApplication
*.peer[*].typename = "Peer"

## Network configuration
*.clientController.startTime =  10s
*.clientController.trackerAddress = "tracker"
*.clientController.trackerPort = 8082

**.mac.txrate = 1000Mbps # bandwidth

## Parameters
#**.swarmManager.normalRefreshInterval = 100s
**.swarmManager.numWant = 20
**.tracker.tcpApp[0].maxListSize = 50
**.tracker.tcpApp[0].contents = xmldoc("simulations/BTContents.xml", "contentList")

# processing time configured with the histogram with 55 bins
*.peer[*].bitTorrentApp.bitTorrentClient.processingTimeHistogram = "simulations/hist_55bin.dat"
# Thruput calculated whenever 50 packets are transfered or every 100ms
#**.peer[*].eth.thruputMeterDL.batchSize = 50
#**.peer[*].eth.thruputMeterUL.batchSize = 50
#**.peer[*].eth.thruputMeterUL.maxInterval = 100ms
#**.peer[*].eth.thruputMeterDL.maxInterval = 100ms

## Statistics
# The eth and arp modules also save statistics
#**.eth.**.vector-recording = false
#**.eth.**.scalar-recording = false
#**.eth[*].**.vector-recording = false
#**.eth[*].**.scalar-recording = false
#**.arp.**.vector-recording = false
#**.arp.**.scalar-recording = false
# enable recordings by module
*.clientController.*.vector-recording = true
*.*.scalar-recording = true
*.*.vector-recording = true
**.bitTorrentClient.*.scalar-recording = true
**.swarmManager.contentManager**.vector-recording = true

# disable all recordings that are not explicitly defined
**.scalar-recording = false
**.vector-recording = false

[Config Validation]
extends = Base
description = "Validate the simulation comparing with Szydlowski 2011."
experiment-label = "Validation Study"
measurement-label = "Upload rate ${rate}, File ${file}"
replication-label = "${repetition},seed-set=<seedset>"
repeat = 3

*.clientController.profile =\
    xmldoc("simulations/BTProfiles.xml",\
            "profileList/profile[@name='${file=small,medium,large}']")
**.contentManager_*.bytesSec = ${rate=35KiB, 92KiB,512KiB}
**.contentManager_*.burstSize = 50
constraint = ("$file" == "small" && "$rate" == "35KiB") ||\
             ("$file" == "medium" && "$rate" == "92KiB") ||\
             ("$file" == "large" && "$rate" == "512KiB")
*.numPeers = ${peers=500}
*.clientController.numSeeders = 1
**.swarmManager.remainingSeeders = 0.3 # 30% of the peers will remain after completion

[Config Performance]
extends = Base
description = "Studies the simulation performance considering the number of\
 peers and file size."
experiment-label = "Performance Study"
measurement-label = "Peers: $peers, File: $file"

*.clientController.profile =\
    xmldoc("simulations/BTProfiles.xml",\
            "profileList/profile[@name='${file=small,medium,large}']")
*.numPeers = ${peers=100,500,1000}
*.clientController.numSeeders = 1
**.swarmManager.remainingSeeders = 0.3 # 30% of the peers will remain after completion

[Config Test]
sim-time-limit=10h
extends = Base
description = "Test the simulation with a small file for fast completion."
experiment-label = "Simulation Test"
measurement-label = "Peers: $peers, Rate: $rate"
 
# 10MB content
*.clientController.profile = xmldoc("simulations/BTProfiles.xml","profileList/profile[@name='test_simple']")
*.clientController.numSeeders = 1
*.numPeers = ${peers=5,50,500}
num-rngs = 3
**.swarmManager.remainingSeeders = 0.3 # 30% of the peers will remain after completion
**.peer[*].bitTorrentApp.swarmManager.contentManager*.rng-0 = 0
**.peer[*].bitTorrentApp.swarmManager.choker*.rng-0 = 1
**.tracker.**.rng-0 = 2
**.contentManager*.bytesSec = ${rate=10KiB, 100KiB, 1MiB}
**.contentManager_*.burstSize = 50

## Debug flags for printing messages to std::err
# WARNING: Enabling these messages may have a high impact on performance, and
# the processing of the log messages may take time and resources
**.bitTorrentClient.debugFlag = true
**.bitTorrentClient.subModulesDebugFlag = true
**.clientController.debugFlag = true
**.swarmManager.debugFlag = true
#**.trackerApp.debugFlag = true
